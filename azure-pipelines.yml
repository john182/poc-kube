trigger:
  - 'master'
pr:
  - '*'

name: $(Date:yyyyMMdd)_Build_$(Rev:r)

variables:
  - group: Teste
  - name: CONFIGURATION
    value: 'Release'
  - name: RUNTIME
    value: 'linux-musl-x64'
  - name: API_PROJECT_PATH
    value: '**/PocKube.API.csproj'
  - name: TEST_PROJECT_PATH
    value: '**/PocKube.Test.csproj'
  - name: vmImageName
    value: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build Stage
    jobs:
      - job: Build
        displayName: Build Job
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UseDotNet@2
            displayName: 'dotnet version 8.0'
            inputs:
              packageType: 'sdk'
              version: '8.0.x'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore'
            inputs:
              command: 'restore'
              projects: |
                $(API_PROJECT_PATH)
                $(TEST_PROJECT_PATH)
              restoreArguments: '--ignore-failed-sources --runtime $(RUNTIME)'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              command: 'build'
              projects: |
                $(API_PROJECT_PATH)
                $(TEST_PROJECT_PATH)
              arguments: '--configuration $(CONFIGURATION) --runtime $(RUNTIME) --no-restore --no-self-contained'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: 'test'
              projects: '$(TEST_PROJECT_PATH)'
              arguments: '--configuration $(CONFIGURATION) --runtime $(RUNTIME) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=[xunit.*]*'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: |
                $(API_PROJECT_PATH)
              arguments: '--configuration $(CONFIGURATION) --runtime $(RUNTIME) --self-contained --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: false

          - task: Docker@2
            displayName: 'docker build and push (stg)'
            inputs:
              containerRegistry: 'John DockerHub'
              repository: 'johnvanderson/poc-kube'
              command: 'buildAndPush'
              dockerfile: '$(Build.SourcesDirectory)/PocKube.API/Dockerfile'
              buildContext: '$(Build.ArtifactStagingDirectory)'
              tags: |
                $(Build.BuildNumber)
                latest

          - task: replacetokens@6
            inputs:
              root: '$(Build.SourcesDirectory)/PocKube.API/Kubernetes'
              sources: |
                configmap.yml
                secret.yml
                deployment.yml
                service.yml
                ingress.yml
                hpa.yml

          - task: PublishBuildArtifacts@1
            displayName: 'azdevops publish build artifacts'
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/PocKube.API/Kubernetes'
              ArtifactName: 'poc-kub-api'

  - stage: Deploy
    displayName: Deploy Stage
    dependsOn: Build
    jobs:
      - deployment: DeployToK8s
        displayName: Deploy to Kubernetes
        environment: 'staging'
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                # Baixa os artefatos publicados
                - download: current
                  artifact: poc-kub-api
                - script: |
                    echo "Listando conteúdo da pasta"
                    ls -l $(Pipeline.Workspace)/poc-kub-api
                    echo "Conteúdo do secret.yml"
                    cat $(Pipeline.Workspace)/poc-kub-api/secret.yml
                  displayName: 'Verificar arquivos do artefato'          

                  
                # Deploy do Secret (imagePullSecret)
                - task: KubernetesManifest@1
                  displayName: Deploy Kubernetes Secret
                  inputs:
                    action: deploy
                    kubernetesServiceConnection: 'KubExterno'
                    namespace: $(AKS_LABEL)
                    manifests: '$(Pipeline.Workspace)/poc-kub-api/secret.yml'

                # Deploy do app
                - task: KubernetesManifest@1
                  displayName: Deploy App to Kubernetes 
                  inputs:
                    action: deploy
                    kubernetesServiceConnection: 'KubExterno'
                    namespace: $(AKS_LABEL)
                    manifests: |
                       $(Pipeline.Workspace)/poc-kub-api/configmap.yml
                       $(Pipeline.Workspace)/poc-kub-api/deployment.yml
                       $(Pipeline.Workspace)/poc-kub-api/service.yml
                       $(Pipeline.Workspace)/poc-kub-api/ingress.yml
                       $(Pipeline.Workspace)/poc-kub-api/hpa.yml
                    containers: |
                      $(CONTAINER_REPOSITORY):$(IMAGE_TAG)
                    imagePullSecrets: |
                      regcred